<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Core</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Concepts.Direction">
            <summary>
            Represents a direction.
            </summary>
        </member>
        <member name="F:Puzzles.Concepts.Direction.None">
            <summary>
            Indicates the placeholder of the direction.
            </summary>
        </member>
        <member name="F:Puzzles.Concepts.Direction.Up">
            <summary>
            Indicates the direction is up.
            </summary>
        </member>
        <member name="F:Puzzles.Concepts.Direction.Down">
            <summary>
            Indicates the direction is down.
            </summary>
        </member>
        <member name="F:Puzzles.Concepts.Direction.Left">
            <summary>
            Indicates the direction is left.
            </summary>
        </member>
        <member name="F:Puzzles.Concepts.Direction.Right">
            <summary>
            Indicates the diretcion is right.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.DataStructures.DataStructureBase">
            <summary>
            Represents the base implementation of the data structure.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureBase.None">
            <summary>
            Indicates the backing data structure is neither array-based nor linked-list-based.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureBase.ArrayBased">
            <summary>
            Indicates the backing data structure is array-based.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureBase.LinkedListBased">
            <summary>
            Indicates the backing data structure is linked-list-based.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.DataStructures.DataStructureType">
            <summary>
            Represents a data structure type.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.None">
            <summary>
            Indicates the type doesn't use a specific data structure.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Array">
            <summary>
            Represents array (a sequence of fixed length).
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.SequenceList">
            <summary>
            Represents sequence list.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.LinkedList">
            <summary>
            Represents linked list (singly-linked, doubly-linked, cyclic, etc.).
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Stack">
            <summary>
            Represents stack.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Queue">
            <summary>
            Represents queue.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Set">
            <summary>
            Represents set.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.HashTable">
            <summary>
            Represents hash table.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Tree">
            <summary>
            Represents tree.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureType.Graph">
            <summary>
            Represents graph.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.DataStructures.DataStructureValueBase">
            <summary>
            Represents the value base of the data structure.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureValueBase.Unknown">
            <summary>
            Indicates the value base is unknown.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureValueBase.Value">
            <summary>
            Indicates the value base is real value.
            </summary>
        </member>
        <member name="F:Puzzles.Meta.DataStructures.DataStructureValueBase.Bit">
            <summary>
            Indicates the value base is bit.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.DataStructures.IDataStructure">
            <summary>
            Represents a data structure.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.DataStructures.IDataStructure.Type">
            <summary>
            Indicates the type of the data structure.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.DataStructures.IDataStructure.Base">
            <summary>
            Indicates the base of the data structure.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.DataStructures.IDataStructure.ValueBase">
            <summary>
            Indicates the value base of the data structure.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.IBoard">
            <summary>
            Represents a game board.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.IBoard.Rows">
            <summary>
            Indicates the number of rows.
            </summary>
        </member>
        <member name="P:Puzzles.Meta.IBoard.Columns">
            <summary>
            Indicates the number of columns.
            </summary>
        </member>
        <member name="T:Puzzles.Meta.ITransformable`1">
            <summary>
            Represents an object that can be transformed into another kind of value.
            </summary>
            <typeparam name="TSelf"><self-type-constraint>
		<para>Indicates the type implementing this interface.</para>
		<para>
			This type doesn't use any extra syntax to constraint such usage, but C# will check for it.
			The type will include a <see langword="where" /> constraint that implements the interface itself
			to declare such "self constraint" usage:
			<code><![CDATA[interface ISelfType<TSelf> where TSelf : ISelfType<TSelf>]]></code>
			In addition, the type should be named <c>TSelf</c> in order to tell type parameters with the others.
		</para>
	</self-type-constraint></typeparam>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.RotateClockwise">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance clockwisely.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.RotateCounterclockwise">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance counter-clockwisely.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.RotatePi">
            <summary>
            Rotate <typeparamref name="TSelf"/> instance 180 degrees.
            </summary>
            <returns>The result rotated.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.MirrorLeftRight">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in left-right side.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.MirrorTopBottom">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in top-bottom side.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.MirrorDiagonal">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in diagonal.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.Transpose">
            <summary>
            Simply calls <see cref="M:Puzzles.Meta.ITransformable`1.MirrorDiagonal"/>.
            </summary>
            <returns>The result fliped.</returns>
        </member>
        <member name="M:Puzzles.Meta.ITransformable`1.MirrorAntidiagonal">
            <summary>
            Mirror <typeparamref name="TSelf"/> instance in anti-diagonal.
            </summary>
            <returns>The result fliped.</returns>
        </member>
    </members>
</doc>
