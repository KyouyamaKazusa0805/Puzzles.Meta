namespace Puzzles.SourceGeneration;

/// <summary>
/// Represents a source generator type that generates some extended delegate types.
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class DelegateExtensionsGenerator : IIncrementalGenerator
{
	/// <inheritdoc/>
	public void Initialize(IncrementalGeneratorInitializationContext context)
		=> context.RegisterSourceOutput(context.CompilationProvider, Generate);


	/// <summary>
	/// The backing generator method.
	/// </summary>
	/// <param name="context">The context.</param>
	/// <param name="_">The compilation.</param>
	private static void Generate(SourceProductionContext context, Compilation _)
	{
		var code = new List<string>();
		for (var i = 1; i <= 16; i++)
		{
			var values = Enumerable.Range(1, i).ToArray();
			var typeParameters = i == 1 ? "T" : string.Join(", ", from value in values select $"T{value}");
			var parameters = i == 1 ? "ref T arg" : string.Join(", ", from value in values select $"ref T{value} arg{value}");
			var parametersReadOnly = i == 1
				? "ref readonly T arg"
				: string.Join(", ", from value in values select $"ref readonly T{value} arg{value}");
			var allowsRefStructConstraint = i == 1
				? "where T : allows ref struct"
				: string.Join("\r\n\t", from value in values select $"where T{value} : allows ref struct");

			code.Add(
				$$"""
				/// <summary>
				/// Encapsulates a method that returns void but pass in a reference or a list of references.
				/// </summary>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(DelegateExtensionsGenerator)}}", "{{Value}}")]
				public delegate void ActionRef<{{typeParameters}}>({{parameters}})
					{{allowsRefStructConstraint}};

				/// <summary>
				/// Encapsulates a method that returns void but pass in a read-only reference or a list of read-only references.
				/// </summary>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(DelegateExtensionsGenerator)}}", "{{Value}}")]
				public delegate void ActionRefReadOnly<{{typeParameters}}>({{parametersReadOnly}})
					{{allowsRefStructConstraint}};

				/// <summary>
				/// Encapsulates a method that returns a <typeparamref name="TResult"/> and pass in a reference or a list of references.
				/// </summary>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(DelegateExtensionsGenerator)}}", "{{Value}}")]
				public delegate TResult FuncRef<{{typeParameters}}, out TResult>({{parameters}})
					{{allowsRefStructConstraint}}
					where TResult : allows ref struct;

				/// <summary>
				/// Encapsulates a method that returns a <typeparamref name="TResult"/> and pass in a read-only reference or a list of read-only references.
				/// </summary>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(DelegateExtensionsGenerator)}}", "{{Value}}")]
				public delegate TResult FuncRefReadOnly<{{typeParameters}}, out TResult>({{parametersReadOnly}})
					{{allowsRefStructConstraint}}
					where TResult : allows ref struct;
				"""
			);
		}

		context.AddSource(
			"DelegateExtensions.g.cs",
			$$"""
			{{Banner.AutoGenerated}}

			#nullable enable

			namespace System;

			{{string.Join("\r\n\r\n", code)}}
			"""
		);
	}
}
